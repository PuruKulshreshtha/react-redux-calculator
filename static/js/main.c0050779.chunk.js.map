{"version":3,"sources":["utils/index.js","redux/constants/index.js","redux/actions/index.js","components/Button.jsx","components/Display.jsx","App.js","redux/reducers/index.js","index.js"],"names":["calculation","calcArray","currentResult","isNaN","length","currentOp","calc","s","current","ch","i","charAt","indexOf","push","parseFloat","parseCalculationString","join","ops","a","b","newCalc","j","console","log","ActionTypes","UPDATE_CALCULATION_AND_RESULT","CLEAR_ALL","updateCalculation","inputValue","currentState","updateCalculationArray","value","operatorValues","lastDotIndex","lastIndexOf","li","includes","lastVal","lastValIsOperator","currentValIsOperator","addValueToCalculation","calculationResult","type","payload","result","connect","state","props","additionalClassWrapper","additionalClass","onClick","dispatch","htmlCode","className","String","fromCharCode","Display","Component","formatNumber","num","toString","replace","componentDidMount","this","_forceScrollOnDisplay","componentDidUpdate","_replaceChars","split","map","data","toPrecision","refs","calculationDisplay","scrollLeft","resultDisplay","render","ref","dangerouslySetInnerHTML","__html","initialState","calculatorReducer","action","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c0050779.chunk.js","sourcesContent":["function parseCalculationString(s) {\n  // Parse a calculation string into an array of numbers and operators\n  let calculation = [],\n    current = \"\";\n  for (let i = 0, ch; (ch = s.charAt(i)); i++) {\n    if (\"*%/+-\".indexOf(ch) > -1) {\n      if (current === \"\" && ch === \"-\") {\n        current = \"-\";\n      } else {\n        calculation.push(parseFloat(current), ch);\n        current = \"\";\n      }\n    } else {\n      current += s.charAt(i);\n    }\n  }\n  if (current !== \"\") {\n    if (current === \"0.\") {\n      calculation.push(\"0.\");\n    } else {\n      calculation.push(parseFloat(current));\n    }\n  }\n  return calculation;\n}\n\nexport const calculation = (calcArray, currentResult) => {\n  if (isNaN(calcArray[calcArray.length - 1])) {\n    return currentResult;\n  }\n  let calcString = calcArray.join(\"\");\n  // Example [4,5,'+',2,'/',6] -> '45+2/6' -> ['45','+','2','/','6']\n  let calc = parseCalculationString(calcString);\n  // let calc = calcString.split(/(\\+|-|\\*|\\/)/g);\n  let ops = [\n      { \"%\": (a, b) => (a / 100) * b },\n      { \"/\": (a, b) => a / b },\n      { \"*\": (a, b) => a * b },\n      { \"+\": (a, b) => a + b },\n      { \"-\": (a, b) => a - b }\n    ],\n    newCalc = [],\n    currentOp;\n  for (let i = 0; i < ops.length; i++) {\n    for (let j = 0; j < calc.length; j++) {\n      if (ops[i][calc[j]]) {\n        currentOp = ops[i][calc[j]];\n      } else if (currentOp) {\n        newCalc[newCalc.length - 1] = currentOp(\n          newCalc[newCalc.length - 1],\n          calc[j]\n        );\n        currentOp = null;\n      } else {\n        newCalc.push(calc[j]);\n      }\n    }\n    calc = newCalc;\n    newCalc = [];\n  }\n\n  if (calc.length > 1) {\n    console.log(\"Error: unable to resolve calculation\");\n    return calc;\n  } else {\n    return calc[0];\n  }\n};\n\nexport const addValueToCalculation = (value, currentState) => {\n  currentState = [...currentState];\n\n  let operatorValues = [\"%\", \"*\", \"/\", \"+\", \"-\"];\n\n  // handle dot key\n  if (value === \".\") {\n    if (!currentState.length) {\n      return [...currentState, \"0.\"];\n    } else {\n      let lastDotIndex = currentState.lastIndexOf(\".\");\n      if (lastDotIndex === -1) {\n        lastDotIndex = currentState.lastIndexOf(\"0.\");\n      }\n      if (lastDotIndex !== -1) {\n        for (let li = lastDotIndex; li < currentState.length; li++) {\n          if (operatorValues.includes(currentState[li])) {\n            return [...currentState, value];\n          }\n        }\n      } else {\n        return [...currentState, value];\n      }\n      return currentState;\n    }\n  }\n\n  if ([\"±\", \"=\"].includes(value)) {\n    if (calculation(currentState)) {\n      if (value === \"±\") {\n        return [calculation(currentState) * -1];\n      }\n      return [calculation(currentState)];\n    }\n  }\n  if (typeof value !== \"number\" && !operatorValues.includes(value)) {\n    return currentState;\n  }\n\n  if (operatorValues.includes(value) && !currentState.length) {\n    return currentState;\n  }\n\n  let lastVal = currentState[currentState.length - 1];\n\n  let lastValIsOperator = operatorValues.includes(lastVal);\n\n  let currentValIsOperator = operatorValues.includes(value);\n\n  if (currentValIsOperator && lastVal === \".\") {\n    currentState[currentState.length - 1] = value;\n    return currentState;\n  }\n  if (lastValIsOperator && currentValIsOperator) {\n    currentState[currentState.length - 1] = value;\n    return currentState;\n  }\n\n  return [...currentState, value];\n};\n","const ActionTypes = {\n  UPDATE_CALCULATION_AND_RESULT: \"UPDATE_CALCULATION_AND_RESULT\",\n  CLEAR_ALL: \"CLEAR_ALL\"\n};\n\nexport default ActionTypes;\n","import { calculation, addValueToCalculation } from \"../../utils\";\nimport ActionTypes from \"../constants\";\nconst { UPDATE_CALCULATION_AND_RESULT, CLEAR_ALL } = ActionTypes;\n\nexport const updateCalculation = (inputValue, currentState, currentResult) => {\n  let updateCalculationArray = addValueToCalculation(inputValue, currentState);\n  let calculationResult = calculation(updateCalculationArray, currentResult);\n\n  return {\n    type: UPDATE_CALCULATION_AND_RESULT,\n    payload: {\n      calculation: updateCalculationArray,\n      result: calculationResult\n    }\n  };\n};\n\nexport const clearCalculation = () => {\n  return {\n    type: CLEAR_ALL,\n    payload: {\n      calculation: [],\n      result: 0\n    }\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateCalculation } from \"../redux/actions\";\n\nconst Button = props => {\n  const {\n    additionalClassWrapper = \"\",\n    additionalClass = \"\",\n    onClick,\n    dispatch,\n    value,\n    calculation,\n    result,\n    htmlCode\n  } = props;\n  return (\n    <div className={`Button ${additionalClassWrapper}`}>\n      <button\n        className={`calc-input ${additionalClass}`}\n        onClick={\n          onClick\n            ? onClick\n            : () => dispatch(updateCalculation(value, calculation, result))\n        }\n      >\n        {htmlCode ? String.fromCharCode(htmlCode) : value}\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  calculation: state.calculation,\n  result: state.result\n});\n\nexport default connect(mapStateToProps)(Button);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Display extends Component {\n  componentDidMount() {\n    this._forceScrollOnDisplay();\n  }\n\n  componentDidUpdate() {\n    this._forceScrollOnDisplay();\n  }\n\n  _replaceChars(value) {\n    value = value.join(\"\");\n    // eslint-disable-next-line no-useless-escape\n    value = value.split(/(\\+|-|\\*|\\%|\\/)/g).map(data => {\n      if (data.length > 8) {\n        return parseFloat(data).toPrecision(2);\n      }\n      return data;\n    });\n    value = value.join(\"\");\n    value = value.replace(/\\//g, '<span class=\"operatorStyle\">÷</span>');\n    value = value.replace(/\\*/g, '<span class=\"operatorStyle\">×</span>');\n    // eslint-disable-next-line no-useless-escape\n    value = value.replace(/\\%/g, '<span class=\"operatorStyle\">%</span>');\n    value = value.replace(/\\+/g, '<span class=\"operatorStyle\">+</span>');\n    value = value.replace(/-/g, '<span class=\"operatorStyle\">-</span>');\n    return value;\n  }\n\n  _forceScrollOnDisplay() {\n    this.refs.calculationDisplay.scrollLeft = 10000;\n    this.refs.resultDisplay.scrollLeft = 10000;\n  }\n\n  formatNumber = num => {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n  };\n  render() {\n    const { result, calculation } = this.props;\n    return (\n      <div className=\"calculator-results\">\n        <div\n          ref=\"calculationDisplay\"\n          className=\"calculationDisplay\"\n          dangerouslySetInnerHTML={{\n            __html: calculation.length ? this._replaceChars(calculation) : 0\n          }}\n        />\n        <div ref=\"resultDisplay\" className=\"resultDisplay\">\n          {result.toString().length > 10\n            ? result.toPrecision(4)\n            : this.formatNumber(result)}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  calculation: state.calculation,\n  result: state.result\n});\n\nexport default connect(mapStateToProps)(Display);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { clearCalculation } from \"./redux/actions\";\nimport Button from \"./components/Button\";\nimport Display from \"./components/Display\";\n\nconst CalculatorComponent = props => {\n  const { dispatch } = props;\n  return (\n    <div className=\"calculator\">\n      <Display />\n      <div className=\"calculator_wrapper\">\n        <Button value={\"c\"} onClick={() => dispatch(clearCalculation())} />\n        <Button value={\"±\"} />\n        <Button value={\"%\"} />\n\n        <Button value=\"/\" htmlCode=\"247\" additionalClass=\"operator\" />\n\n        <Button value={7} />\n        <Button value={8} />\n        <Button value={9} />\n        <Button value=\"*\" htmlCode=\"215\" additionalClass=\"operator\" />\n\n        <Button value={4} />\n        <Button value={5} />\n        <Button value={6} />\n        <Button value=\"-\" htmlCode=\"8722\" additionalClass=\"operator\" />\n\n        <Button value={1} />\n        <Button value={2} />\n        <Button value={3} />\n        <Button value=\"+\" htmlCode=\"43\" additionalClass=\"operator\" />\n\n        <Button value={0} />\n        <Button value={\".\"} />\n        <Button\n          value={\"=\"}\n          additionalClassWrapper=\"equal\"\n          additionalClass=\"equal\"\n        />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  calculation: state.calculation,\n  result: state.result\n});\n\nexport default connect(mapStateToProps)(CalculatorComponent);\n","import ActionTypes from \"../constants\";\nconst { UPDATE_CALCULATION_AND_RESULT, CLEAR_ALL } = ActionTypes;\nconst initialState = {\n  calculation: [],\n  result: 0\n};\n\nconst calculatorReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_CALCULATION_AND_RESULT:\n      return {\n        calculation: action.payload.calculation,\n        result: action.payload.result\n      };\n    case CLEAR_ALL:\n      return {\n        calculation: [],\n        result: 0\n      };\n    default:\n      return state;\n  }\n};\n\nexport default calculatorReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/index.css\";\nimport CalculatorApp from \"./App\";\nimport calculatorReducer from \"./redux/reducers\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nlet store = createStore(calculatorReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <CalculatorApp />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}